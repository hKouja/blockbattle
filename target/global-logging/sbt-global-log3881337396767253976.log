[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@5dce5c03, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Game.scala","languageId":"scala","version":1,"text":"package BlockBattle\r\n\r\nimport BlockBattle.Game.Color.{black, grass, mole, mole2, sky, soil, worm}\r\n\r\nobject Game {\r\n  val windowSize = (30, 50)\r\n  val windowTitle = \"EPIC BLOCK BATTLE\"\r\n  val blockSize = 14\r\n  val skyRange = 0 to 7\r\n  val grassRange = 8 to 8\r\n\r\n  object Color {\r\n    import java.awt.Color as JColor\r\n\r\n    val black  = new JColor (0, 0, 0)\r\n    val mole   = new JColor (51, 51, 0)\r\n    val mole2  = new JColor (60, 60, 60)\r\n    val soil   = new JColor (153, 102, 51)\r\n    val tunnel = new JColor (204, 153, 102)\r\n    val grass  = new JColor (25, 130, 35)\r\n    val sky    = new JColor (31, 190, 214)\r\n    val worm   = new JColor (225, 100, 235)\r\n  }\r\n}\r\n\r\nclass Game (\r\n             val leftPlayerName: String,\r\n             val rightPlayerName: String\r\n           ) {\r\n\r\n  import Game._\r\n\r\n  val window = new BlockWindow(windowSize, windowTitle, blockSize)\r\n\r\n  val leftMole = new Mole (\r\n    name = leftPlayerName,\r\n    Pos (windowSize._1 * blockSize/ 2, windowSize._2 * blockSize /2),\r\n    dir = (1,0),\r\n    Color.mole,\r\n    KeyControl(\"a\", \"d\", \"w\", \"s\")\r\n  )\r\n  val rightMole = new Mole (\r\n    name = rightPlayerName,\r\n    Pos (1,2),\r\n    dir = (1,1),\r\n    Color.mole2,\r\n    KeyControl(\"Left\", \"Right\", \"Up\", \"Down\")\r\n  )\r\n\r\n  def place(n: Int): Vector [(Int, Int)] = {\r\n    import scala.util.Random.nextInt\r\n    (for (i <- 1 to n) yield (\r\n      1 + nextInt(windowSize._1  * blockSize - 1),\r\n      grassRange.last + 1 + nextInt(windowSize._2 - (grassRange.last + 1))*blockSize)).toVector\r\n  }\r\n\r\n  def worm(xs: Vector[(Int, Int)]): Unit = {\r\n    for (i <- 0 until xs.length) {\r\n      val localPos: Pos = Pos(xs(i)._1, xs(i)._2)\r\n      window.setBlock(localPos, Color.worm)\r\n    }\r\n  }\r\n\r\n  def eraseBlocks(mole: Mole)(x1: Int, y1: Int, x2: Int, y2: Int): Unit = {\r\n    x1 == mole.pos.x\r\n    y1 == mole.pos.y\r\n  }\r\n\r\n  def paint(): Unit = {\r\n    window.pixelWindow.fill(0, 0, windowSize._1 * blockSize, skyRange.last * blockSize, sky)\r\n    window.pixelWindow.fill(0, skyRange.last * blockSize, windowSize._1 * blockSize, grassRange.last + blockSize, grass)\r\n    window.pixelWindow.fill(0, grassRange.last * blockSize, windowSize._1 * blockSize, windowSize._2 * blockSize, soil)\r\n  }\r\n\r\n  def text(): Unit = {\r\n    window.write(s\"$leftPlayerName's points: ${leftMole.points}\", pos = Pos(0,0), black, blockSize)\r\n    window.write(s\"$rightPlayerName's points: ${rightMole.points}\", pos = Pos(19,0), black, blockSize)\r\n\r\n  }\r\n\r\n  def drawWorld() = {\r\n    paint()\r\n    text()\r\n  }\r\n\r\n  def update(mole: Mole): Unit = {\r\n\r\n    if (mole.nextPos.x == windowSize._1 * blockSize) {\r\n      mole.reverseDir()\r\n    }\r\n    if (mole.nextPos.y == windowSize._2 * blockSize) {\r\n      mole.reverseDir()\r\n    }\r\n    if (mole.nextPos.y == skyRange.last * blockSize) {\r\n      mole.reverseDir()\r\n    }\r\n    if (mole.nextPos.x == - blockSize) {\r\n      mole.reverseDir()\r\n    }\r\n\r\n    window.setBlock(mole.nextPos, Color.tunnel)\r\n    mole.move()\r\n    window.setBlock(mole.nextPos, mole.color)\r\n  }\r\n\r\n  def handleEvents(): Unit = {\r\n    var anEvent = window.nextEvent()\r\n    while (anEvent != BlockWindow.Event.Undefined) {\r\n      anEvent match {\r\n        case BlockWindow.Event.KeyPressed(key) => {\r\n          rightMole.setDir(key)\r\n          leftMole.setDir(key)\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  var quit = false\r\n  val delayMillis = 100\r\n\r\n  def gameLoop(): Unit = {\r\n    while (!quit) {\r\n      val t0 = System.currentTimeMillis\r\n\r\n      handleEvents()\r\n      update(leftMole)\r\n      update(rightMole)\r\n\r\n      val time = (System.currentTimeMillis - t0).toInt\r\n      Thread.sleep((delayMillis - time) max 0)\r\n    }\r\n  }\r\n\r\n  def start(): Unit = {\r\n    println(\"Start digging!\")\r\n    println(s\"$leftPlayerName ${leftMole.keyControl}\")\r\n    println(s\"$rightPlayerName ${rightMole.keyControl}\")\r\n    drawWorld()\r\n    worm(place(6))\r\n    gameLoop()\r\n  }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/KeyControl.scala","languageId":"scala","version":1,"text":"package BlockBattle\r\n\r\ncase class KeyControl(left: String, right: String, up: String, down: String) {\r\n  def direction(key: String): (Int, Int) = {\r\n    if      ( key == up)    ( 0,-1 )\r\n    else if ( key == down)  ( 0, 1 )\r\n    else if ( key == left)  (-1, 0 )\r\n    else if ( key == right) ( 1, 0 )\r\n    else                    ( 0, 0 )\r\n  }\r\n\r\n  def has(key: String): Boolean = {\r\n    ( key == up || key == down || key == left || key == right)\r\n  }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Mole.scala","languageId":"scala","version":1,"text":"package BlockBattle\r\n\r\nclass Mole (\r\n           val name: String,\r\n           var pos: Pos,\r\n           var dir: (Int, Int),\r\n           val color: java.awt.Color,\r\n           val keyControl: KeyControl\r\n           ) {\r\n  var points = 0\r\n  override def toString = s\"Mole[name=$name, pos=$pos, dir=$dir, points=$points\"\r\n\r\n  def setDir(key: String): Unit = {\r\n    if (keyControl.has(key)) dir = keyControl.direction(key)\r\n  }\r\n\r\n  def reverseDir(): Unit = {\r\n    dir = (-1 * dir._1, -1 * dir._2)\r\n  }\r\n\r\n  def move(): Unit = {\r\n    pos = nextPos\r\n  }\r\n\r\n  def nextPos: Pos = pos.moved(dir)\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\hassa\blockbattle\target\scala-3.0.2\zinc\inc_compile_3.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Oct 14, 2021 6:44:49 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/BlockWindow.scala","languageId":"scala","version":1,"text":"package BlockBattle\r\n\r\nclass BlockWindow(\r\n                   val nbrOfBlocks: (Int, Int),\r\n                   val title: String = \"BLOCK WINDOW\",\r\n                   val blockSize: Int = 14\r\n                 ):\r\n\r\n  import introprog.PixelWindow\r\n\r\n  val pixelWindow = new PixelWindow(nbrOfBlocks._1 * blockSize, nbrOfBlocks._2 * blockSize, title)\r\n\r\n  def setBlock(pos: Pos, color: java.awt.Color): Unit = {\r\n\r\n    val x = blockSize * pos.x\r\n    val y = blockSize * pos.y\r\n\r\n    pixelWindow.fill(pos.x, pos.y, blockSize, blockSize, color)\r\n  }\r\n\r\n  def getBlock(pos: Pos): java.awt.Color = {\r\n    pixelWindow.getPixel(pos.x * blockSize, pos.y * blockSize)\r\n  }\r\n\r\n  def write(\r\n             text: String,\r\n             pos: Pos,\r\n             color: java.awt.Color,\r\n             textSize: Int = blockSize): Unit = {\r\n    pixelWindow.drawText(text, pos.x * blockSize, pos.y * blockSize, color, textSize)\r\n  }\r\n  \r\n  def nextEvent(maxWaitMillis: Int = 10): BlockWindow.Event.EventType = {\r\n    import BlockWindow.Event._\r\n    pixelWindow.awaitEvent(maxWaitMillis)\r\n    pixelWindow.lastEventType match\r\n      case PixelWindow.Event.KeyPressed => KeyPressed(pixelWindow.lastKey)\r\n      case PixelWindow.Event.WindowClosed => WindowClosed\r\n      case _ => Undefined\r\n  }\r\n\r\nobject BlockWindow {\r\n  def delay(millis: Int): Unit = Thread.sleep(millis)\r\n  object Event {\r\n    trait EventType\r\n\r\n    case class KeyPressed(key: String) extends EventType\r\n\r\n    case object WindowClosed extends EventType\r\n\r\n    case object Undefined extends EventType\r\n  }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Main.scala","languageId":"scala","version":1,"text":"package BlockBattle\r\n\r\nobject Main {\r\n\r\n\r\n  def main(args: Array[String]): Unit = {\r\n\r\n    val game = new Game (\"left\", \"right\")\r\n    game.start()\r\n\r\n  }\r\n}\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Pos.scala","languageId":"scala","version":1,"text":"package BlockBattle\r\n\r\nimport BlockBattle.Game.blockSize\r\n\r\ncase class Pos(x: Int, y: Int) {\r\n  def moved(delta: (Int, Int)): Pos = Pos(x + (delta._1 * blockSize), y + (delta._2 * blockSize))\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Pos.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/KeyControl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Mole.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/BlockWindow.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Game.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hassa/blockbattle/src/main/scala/BlockBattle/Main.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨1, shutdown, null})[0m
